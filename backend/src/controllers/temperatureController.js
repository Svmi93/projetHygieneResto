// backend/src/controllers/temperatureController.js
const { getConnection } = require('../config/db');

// --- Functions for client users (can only manage their own records) ---

exports.createTemperatureRecord = async (req, res) => {
    const userId = req.user.id; // The ID of the logged-in client
    const { type, location, temperature, notes } = req.body; // timestamp is now auto-generated by DB

    if (!type || !location || temperature === undefined || temperature === null) {
        return res.status(400).json({ message: 'Type, Location, and Temperature are required.' });
    }

    try {
        const pool = await getConnection();
        const [result] = await pool.execute(
            'INSERT INTO temperature_records (user_id, type, location, temperature, notes) VALUES (?, ?, ?, ?, ?)',
            [userId, type, location, temperature, notes]
        );

        // Fetch the newly created record, including the auto-generated timestamp
        const [newRecord] = await pool.execute(
            'SELECT id, user_id, type, location, temperature, timestamp, notes FROM temperature_records WHERE id = ?',
            [result.insertId]
        );

        res.status(201).json(newRecord[0]);
    } catch (error) {
        console.error('Error creating temperature record:', error);
        res.status(500).json({ message: 'Internal server error while creating temperature record.' });
    }
};

exports.getTemperatureRecordsByClient = async (req, res) => {
    const userId = req.user.id; // The ID of the logged-in client
    try {
        const pool = await getConnection();
        const [records] = await pool.execute(
            'SELECT id, type, location, temperature, timestamp, notes FROM temperature_records WHERE user_id = ? ORDER BY timestamp DESC',
            [userId]
        );
        res.status(200).json(records);
    } catch (error) {
        console.error('Error fetching temperature records for client:', error);
        res.status(500).json({ message: 'Internal server error while fetching temperature records.' });
    }
};

exports.updateTemperatureRecordByClient = async (req, res) => {
    const { id } = req.params; // Record ID
    const userId = req.user.id; // Logged-in user ID
    const { type, location, temperature, notes } = req.body;

    if (!type || !location || temperature === undefined || temperature === null) {
        return res.status(400).json({ message: 'Type, Location, and Temperature are required for update.' });
    }

    try {
        const pool = await getConnection();
        // Ensure the record belongs to the logged-in user
        const [targetRecord] = await pool.execute(
            'SELECT id FROM temperature_records WHERE id = ? AND user_id = ?',
            [id, userId]
        );
        if (targetRecord.length === 0) {
            return res.status(403).json({ message: 'Access denied. This record is not yours or does not exist.' });
        }

        const [result] = await pool.execute(
            'UPDATE temperature_records SET type = ?, location = ?, temperature = ?, notes = ? WHERE id = ?',
            [type, location, temperature, notes, id]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Record not found or no changes made.' });
        }

        // Return the updated record
        const [updatedRec] = await pool.execute(
            'SELECT id, user_id, type, location, temperature, timestamp, notes FROM temperature_records WHERE id = ?',
            [id]
        );
        res.status(200).json(updatedRec[0]);
    } catch (error) {
        console.error('Error updating temperature record by client:', error);
        res.status(500).json({ message: 'Internal server error while updating temperature record.' });
    }
};

exports.deleteTemperatureRecordByClient = async (req, res) => {
    const { id } = req.params; // Record ID
    const userId = req.user.id; // Logged-in user ID

    try {
        const pool = await getConnection();
        // Ensure the record belongs to the logged-in user
        const [targetRecord] = await pool.execute(
            'SELECT id FROM temperature_records WHERE id = ? AND user_id = ?',
            [id, userId]
        );
        if (targetRecord.length === 0) {
            return res.status(403).json({ message: 'Access denied. This record is not yours or does not exist.' });
        }

        const [result] = await pool.execute('DELETE FROM temperature_records WHERE id = ?', [id]);
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Record not found.' });
        }
        res.status(204).send();
    } catch (error) {
        console.error('Error deleting temperature record by client:', error);
        res.status(500).json({ message: 'Internal server error while deleting temperature record.' });
    }
};

// --- Functions for admin_client users (can manage records of their assigned clients) ---

exports.getTemperatureRecordsForAdminClient = async (req, res) => {
    const adminClientId = req.user.id; // The ID of the logged-in admin_client
    try {
        const pool = await getConnection();
        // Select records for all clients associated with this admin_client
        const [records] = await pool.execute(
            `SELECT tr.id, tr.user_id, u.nom_entreprise, u.nom_client, u.prenom_client, tr.type, tr.location, tr.temperature, tr.timestamp, tr.notes
             FROM temperature_records tr
             JOIN users u ON tr.user_id = u.id
             WHERE u.admin_client_id = ?
             ORDER BY tr.timestamp DESC`,
            [adminClientId]
        );
        res.status(200).json(records);
    } catch (error) {
        console.error('Error fetching temperature records for admin client dashboard:', error);
        res.status(500).json({ message: 'Internal server error while fetching temperature records.' });
    }
};

exports.addTemperatureRecordByAdminClient = async (req, res) => {
    const adminClientId = req.user.id; // The ID of the logged-in admin_client
    const { client_id, type, location, temperature, notes } = req.body; // admin_client can specify client_id

    if (!client_id || !type || !location || temperature === undefined || temperature === null) {
        return res.status(400).json({ message: 'Client ID, Type, Location, and Temperature are required.' });
    }

    try {
        const pool = await getConnection();
        // Verify that the client_id belongs to this admin_client
        const [targetClient] = await pool.execute(
            'SELECT id FROM users WHERE id = ? AND role = "client" AND admin_client_id = ?',
            [client_id, adminClientId]
        );
        if (targetClient.length === 0) {
            return res.status(403).json({ message: 'Access denied. This client is not associated with your account.' });
        }

        const [result] = await pool.execute(
            'INSERT INTO temperature_records (user_id, type, location, temperature, notes) VALUES (?, ?, ?, ?, ?)',
            [client_id, type, location, temperature, notes]
        );

        const [newRecord] = await pool.execute(
            'SELECT id, user_id, type, location, temperature, timestamp, notes FROM temperature_records WHERE id = ?',
            [result.insertId]
        );
        res.status(201).json(newRecord[0]);
    } catch (error) {
        console.error('Error adding temperature record by admin client:', error);
        res.status(500).json({ message: 'Internal server error while adding temperature record.' });
    }
};

exports.updateTemperatureRecordForAdminClient = async (req, res) => {
    const { id } = req.params; // Record ID
    const adminClientId = req.user.id; // Logged-in admin_client ID
    const { client_id, type, location, temperature, notes } = req.body; // client_id might be sent for verification

    if (!client_id || !type || !location || temperature === undefined || temperature === null) {
        return res.status(400).json({ message: 'Client ID, Type, Location, and Temperature are required for update.' });
    }

    try {
        const pool = await getConnection();

        // Verify that the record exists and belongs to a client associated with this admin_client
        const [targetRecord] = await pool.execute(
            `SELECT tr.id FROM temperature_records tr
             JOIN users u ON tr.user_id = u.id
             WHERE tr.id = ? AND u.role = "client" AND u.admin_client_id = ? AND tr.user_id = ?`,
            [id, adminClientId, client_id]
        );
        if (targetRecord.length === 0) {
            return res.status(403).json({ message: 'Access denied. This record is not for your clients or does not exist.' });
        }

        const [result] = await pool.execute(
            'UPDATE temperature_records SET type = ?, location = ?, temperature = ?, notes = ? WHERE id = ?',
            [type, location, temperature, notes, id]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Record not found or no changes made.' });
        }

        const [updatedRec] = await pool.execute(
            'SELECT id, user_id, type, location, temperature, timestamp, notes FROM temperature_records WHERE id = ?',
            [id]
        );
        res.status(200).json(updatedRec[0]);
    } catch (error) {
        console.error('Error updating temperature record for admin client:', error);
        res.status(500).json({ message: 'Internal server error while updating temperature record.' });
    }
};

exports.deleteTemperatureRecordForAdminClient = async (req, res) => {
    const { id } = req.params; // Record ID
    const adminClientId = req.user.id; // Logged-in admin_client ID

    try {
        const pool = await getConnection();

        // Verify that the record exists and belongs to a client associated with this admin_client
        const [targetRecord] = await pool.execute(
            `SELECT tr.id FROM temperature_records tr
             JOIN users u ON tr.user_id = u.id
             WHERE tr.id = ? AND u.role = "client" AND u.admin_client_id = ?`,
            [id, adminClientId]
        );
        if (targetRecord.length === 0) {
            return res.status(403).json({ message: 'Access denied. This record is not for your clients or does not exist.' });
        }

        const [result] = await pool.execute('DELETE FROM temperature_records WHERE id = ?', [id]);
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Record not found.' });
        }
        res.status(204).send();
    } catch (error) {
        console.error('Error deleting temperature record for admin client:', error);
        res.status(500).json({ message: 'Internal server error while deleting temperature record.' });
    }
};