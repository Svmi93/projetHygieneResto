# docker-compose.yml

services:
  # Service for your Node.js API
  api:
    build:
      context: ./backend # Path to your backend folder relative to this docker-compose.yml
      dockerfile: Dockerfile
    container_name: hygieneresto_api
    ports:
      - "5001:5001" # Maps host port 5001 to API container port 5001
    environment:
      # Pass your .env variables from the host to the container
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5001 # The port your Express API listens on INSIDE the container
      HOST: db # IMPORTANT: This is the database service name in Docker Compose
      USERNAME: ${USERNAME}
      PASSWORD: ${PASSWORD}
      DATABASE: ${DATABASE}
      DB_PORT: 3306 # IMPORTANT: This is the INTERNAL port of the MySQL container (standard 3306)
      JWT_SECRET: ${JWT_SECRET}
      TZ: Europe/Paris
      FIREBASE_STORAGE_BUCKET: ${FIREBASE_STORAGE_BUCKET} # Ajouté pour Firebase
    env_file:
      - ./backend/.env # Path to your .env file relative to docker-compose.yml
    depends_on:
      db:
        condition: service_healthy # The API will only start if the DB is healthy
    restart: always
    volumes:
      - ./backend:/usr/src/app # Mounts your backend source code
      - ./firebase-admin-keys:/usr/src/app/firebase-admin-keys # <--- CORRECTION MAJEURE ICI
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 45s

  # Service for the MySQL database
  db:
    image: mysql:8.0
    container_name: hygieneresto_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${PASSWORD}
      MYSQL_DATABASE: ${DATABASE}
      MYSQL_USER: ${USERNAME}
      MYSQL_PASSWORD: ${PASSWORD}
      MYSQL_TCP_BIND_ADDRESS: 0.0.0.0
      TZ: Europe/Paris
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - db_data:/var/lib/mysql # Persistent storage for MySQL data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql # Path for your initial SQL script
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  # Service for phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: hygieneresto_phpmyadmin
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: ${PASSWORD}
      PMA_ARBITRARY: 1
      TZ: Europe/Paris
    ports:
      - "8080:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

# Definition of named volumes for data persistence
volumes:
  db_data:

# Definition of the Docker network
networks:
  app-network:
    driver: bridge








# # docker-compose.yml

# services:
#   # Service for your Node.js API
#   api:
#     build:
#       context: ./backend # Path to your backend folder relative to this docker-compose.yml
#       dockerfile: Dockerfile
#     container_name: hygieneresto_api
#     ports:
#       - "5001:5001" # Maps host port 5001 to API container port 5001
#     environment:
#       # Pass your .env variables from the host to the container
#       NODE_ENV: ${NODE_ENV:-development}
#       PORT: 5001 # The port your Express API listens on INSIDE the container
#       HOST: db # IMPORTANT: This is the database service name in Docker Compose
#       USERNAME: ${USERNAME}
#       PASSWORD: ${PASSWORD}
#       DATABASE: ${DATABASE}
#       DB_PORT: 3306 # IMPORTANT: This is the INTERNAL port of the MySQL container (standard 3306)
#       JWT_SECRET: ${JWT_SECRET}
#       TZ: Europe/Paris # <--- AJOUTE CETTE LIGNE POUR DÉFINIR LE FUSEAU HORAIRE
#     env_file:
#       - ./backend/.env # Path to your .env file relative to docker-compose.yml
      
#     depends_on:
#       db:
#         condition: service_healthy # The API will only start if the DB is healthy
#     restart: always
#     volumes:
#       - ./backend:/usr/src/app # Mounts your backend source code
#       - ./firebase-admin-keys:/usr/src/app/firebase-admin-keys
#     networks:
#       - app-network
#     healthcheck: # <-- NOUVELLE SECTION AJOUTÉE POUR LE SERVICE API
#       test: ["CMD", "curl", "-f", "http://localhost:5001/"] # Teste si l'API répond sur sa route de test
#       interval: 15s # Vérifie toutes les 10 secondes
#       timeout: 5s   # Timeout de 5 secondes pour le test
#       retries: 5    # 5 tentatives avant de marquer comme "unhealthy"
#       start_period: 45s # Attendre 30s avant de commencer les tests (pour laisser le temps à Node.js de démarrer)

#   # Service for the MySQL database
#   db:
#     image: mysql:8.0
#     container_name: hygieneresto_db
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: ${PASSWORD}
#       MYSQL_DATABASE: ${DATABASE}
#       MYSQL_USER: ${USERNAME}
#       MYSQL_PASSWORD: ${PASSWORD}
#       MYSQL_TCP_BIND_ADDRESS: 0.0.0.0 # <--- Crucial: Allows connections from other Docker containers
#       TZ: Europe/Paris # <--- AJOUTE CETTE LIGNE AUSSI POUR LA BASE DE DONNÉES
#     ports:
#       - "${DB_PORT}:3306" # Maps a host port (from .env) to MySQL's internal port 3306
#     volumes:
#       - db_data:/var/lib/mysql # Persistent storage for MySQL data
#       - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql # Path for your initial SQL script
#     healthcheck: # Checks if the database is running and ready
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${PASSWORD}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#       start_period: 30s
#     networks:
#       - app-network

#   # Service for phpMyAdmin
#   phpmyadmin:
#     image: phpmyadmin/phpmyadmin
#     container_name: hygieneresto_phpmyadmin
#     environment:
#       PMA_HOST: db # Connects to the 'db' service
#       PMA_PORT: 3306
#       MYSQL_ROOT_PASSWORD: ${PASSWORD} # Uses the same root password for phpMyAdmin login
#       PMA_ARBITRARY: 1 # Allows connecting to other servers (useful for multiple DBs, but not strictly needed here)
#       TZ: Europe/Paris # <--- AJOUTE CETTE LIGNE POUR PHPMyAdmin AUSSI
#     ports:
#       - "8080:80" # Maps host port 8080 to phpMyAdmin's internal web server port 80
#     depends_on:
#       db:
#         condition: service_healthy # Ensures phpMyAdmin starts only after the DB is healthy
#     networks:
#       - app-network

# # Definition of named volumes for data persistence
# # This section must appear only ONCE at the top-level of the YAML file.
# volumes:
#   db_data: # Declares a named volume for the database data

# # Definition of the Docker network
# # This section must appear only ONCE at the top-level of the YAML file.
# networks:
#   app-network:
#     driver: bridge # Defines a custom bridge network for internal communication








# # docker-compose.yml

# services:
#   # Service for your Node.js API
#   api:
#     build:
#       context: ./backend # Path to your backend folder relative to this docker-compose.yml
#       dockerfile: Dockerfile
#     container_name: hygieneresto_api
#     ports:
#       - "5001:5001" # Maps host port 5001 to API container port 5001
#     environment:
#       # Pass your .env variables from the host to the container
#       NODE_ENV: ${NODE_ENV:-development}
#       PORT: 5001 # The port your Express API listens on INSIDE the container
#       HOST: db # IMPORTANT: This is the database service name in Docker Compose
#       USERNAME: ${USERNAME}
#       PASSWORD: ${PASSWORD}
#       DATABASE: ${DATABASE}
#       DB_PORT: 3306 # IMPORTANT: This is the INTERNAL port of the MySQL container (standard 3306)
#       JWT_SECRET: ${JWT_SECRET}
#     env_file:
#       - ./backend/.env # Path to your .env file relative to docker-compose.yml
#     depends_on:
#       db:
#         condition: service_healthy # The API will only start if the DB is healthy
#     restart: always
#     volumes:
#       - ./backend:/usr/src/app # Mounts your backend source code
#       # Remove the problematic line: - /usr/src/app/node_modules
#       # Let the Dockerfile's npm install handle node_modules inside the container during build
#     networks:
#       - app-network
#     healthcheck: # <-- NOUVELLE SECTION AJOUTÉE POUR LE SERVICE API
#       test: ["CMD", "curl", "-f", "http://localhost:5001/"] # Teste si l'API répond sur sa route de test
#       interval: 15s # Vérifie toutes les 10 secondes
#       timeout: 5s   # Timeout de 5 secondes pour le test
#       retries: 5    # 5 tentatives avant de marquer comme "unhealthy"
#       start_period: 45s # Attendre 30s avant de commencer les tests (pour laisser le temps à Node.js de démarrer)

#   # Service for the MySQL database
#   db:
#     image: mysql:8.0
#     container_name: hygieneresto_db
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: ${PASSWORD}
#       MYSQL_DATABASE: ${DATABASE}
#       MYSQL_USER: ${USERNAME}
#       MYSQL_PASSWORD: ${PASSWORD}
#       MYSQL_TCP_BIND_ADDRESS: 0.0.0.0 # <--- Crucial: Allows connections from other Docker containers
#     ports:
#       - "${DB_PORT}:3306" # Maps a host port (from .env) to MySQL's internal port 3306
#     volumes:
#       - db_data:/var/lib/mysql # Persistent storage for MySQL data
#       - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql # Path for your initial SQL script
#     healthcheck: # Checks if the database is running and ready
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${PASSWORD}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#       start_period: 30s
#     networks:
#       - app-network

#   # Service for phpMyAdmin
#   phpmyadmin:
#     image: phpmyadmin/phpmyadmin
#     container_name: hygieneresto_phpmyadmin
#     environment:
#       PMA_HOST: db # Connects to the 'db' service
#       PMA_PORT: 3306
#       MYSQL_ROOT_PASSWORD: ${PASSWORD} # Uses the same root password for phpMyAdmin login
#       PMA_ARBITRARY: 1 # Allows connecting to other servers (useful for multiple DBs, but not strictly needed here)
#     ports:
#       - "8080:80" # Maps host port 8080 to phpMyAdmin's internal web server port 80
#     depends_on:
#       db:
#         condition: service_healthy # Ensures phpMyAdmin starts only after the DB is healthy
#     networks:
#       - app-network

# # Definition of named volumes for data persistence
# # This section must appear only ONCE at the top-level of the YAML file.
# volumes:
#   db_data: # Declares a named volume for the database data

# # Definition of the Docker network
# # This section must appear only ONCE at the top-level of the YAML file.
# networks:
#   app-network:
#     driver: bridge # Defines a custom bridge network for internal communication


# # docker-compose.yml

# services:
#   # Service for your Node.js API
#   api:
#     build:
#       context: ./backend # Make sure this is the correct path to your backend folder
#       dockerfile: Dockerfile
#     container_name: hygieneresto_api
#     ports:
#       - "5001:5001" # Maps host port 5001 to API container port 5001
#     environment:
#       # Pass your .env variables from the host to the container
#       NODE_ENV: ${NODE_ENV:-development}
#       PORT: 5001 # The port your Express API listens on INSIDE the container
#       HOST: db # IMPORTANT: This is the database service name in Docker Compose
#       USERNAME: ${USERNAME}
#       PASSWORD: ${PASSWORD}
#       DATABASE: ${DATABASE}
#       DB_PORT: 3306 # IMPORTANT: This is the INTERNAL port of the MySQL container (standard 3306)
#       JWT_SECRET: ${JWT_SECRET}
#     env_file:
#       - ./backend/.env # Path to your .env file relative to docker-compose.yml
#     depends_on:
#       db:
#         condition: service_healthy # L'API ne démarrera que si la DB est saine
#     restart: always
#     volumes:
#       - ./backend:/usr/src/app
#       - /usr/src/app/node_modules # Prevents host's node_modules from overwriting container's
#     networks:
#       - app-network

  # Service for the MySQL database
#   db:
#     image: mysql:8.0
#     container_name: hygieneresto_db
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: ${PASSWORD}
#       MYSQL_DATABASE: ${DATABASE}
#       MYSQL_USER: ${USERNAME}
#       MYSQL_PASSWORD: ${PASSWORD}
#     ports:
#       - "${DB_PORT}:3306" # Conserve le port variable de votre .env
#     volumes:
#       - db_data:/var/lib/mysql
#       - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql # Chemin pour init.sql
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${PASSWORD}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#       start_period: 30s
#     networks:
#       - app-network
#     # La ligne 'command' a été supprimée pour permettre à MySQL de s'initialiser normalement.

#   # Service for phpMyAdmin
#   phpmyadmin:
#     image: phpmyadmin/phpmyadmin
#     container_name: hygieneresto_phpmyadmin
#     environment:
#       PMA_HOST: db
#       PMA_PORT: 3306
#       MYSQL_ROOT_PASSWORD: ${PASSWORD}
#       PMA_ARBITRARY: 1
#     ports:
#       - "8080:80"
#     depends_on:
#       db:
#         condition: service_healthy
#     networks:
#       - app-network

# # Definition of named volumes for data persistence
# volumes:
#   db_data:

# # Definition of the Docker network
# networks:
#   app-network:
#     driver: bridge




# services:
#   # Service for your Node.js API
#   api:
#     build:
#       context: ./backend # Make sure this is the correct path to your backend folder
#       dockerfile: Dockerfile
#     container_name: hygieneresto_api
#     ports:
#       - "5001:5001" # Maps host port 5001 to API container port 5001
#     environment:
#       # Pass your .env variables from the host to the container
#       # These variables will be available via process.env in your Node.js application
#       NODE_ENV: ${NODE_ENV:-development}
#       PORT: 5001 # The port your Express API listens on INSIDE the container (must match EXPOSE in Dockerfile)
#       HOST: db # IMPORTANT: This is the database service name in Docker Compose
#       USERNAME: ${USERNAME}
#       PASSWORD: ${PASSWORD}
#       DATABASE: ${DATABASE}
#       DB_PORT: 3306 # IMPORTANT: This is the INTERNAL port of the MySQL container (standard 3306)
#       JWT_SECRET: ${JWT_SECRET} # <--- ADDED THIS LINE EXPLICITLY
#     env_file: # <--- ADDED THIS BLOCK
#       - ./backend/.env # Path to your .env file relative to docker-compose.yml
#     depends_on:
#       - db # The API depends on the 'db' (database) service
#     restart: always
#     volumes:
#       # Mount the backend source code into the container for development
#       # This allows nodemon to detect changes without rebuilding the image
#       - ./backend:/usr/src/app
#       # Ensure node_modules isn't overwritten by volume mount on macOS/Windows
#       - /usr/src/app/node_modules # <-- Prevents host's node_modules from overwriting container's
#     networks:
#       - app-network

#   # Service for the MySQL database
#   db:
#     image: mysql:5.7 # Using MySQL 5.7 as specified
#     container_name: hygieneresto_db
#     restart: always
#     environment:
#       # Environment variables for MySQL (used by the MySQL image at startup)
#       MYSQL_ROOT_PASSWORD: ${PASSWORD}
#       MYSQL_DATABASE: ${DATABASE}
#       MYSQL_USER: ${USERNAME}
#       MYSQL_PASSWORD: ${PASSWORD}
#     ports:
#       - "${DB_PORT}:3306" # Maps the host port (e.g., 8889 from .env) to the container DB port 3306
#     volumes:
#       # Persistent volume for database data
#       - db_data:/var/lib/mysql
#       # Optional: to execute an SQL script on startup (table creation, etc.)
#       # If you have an init.sql file at the root of your global project, uncomment the line below
#       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#     networks:
#       - app-network

#   # Service for phpMyAdmin (ADD THIS SECTION)
#   phpmyadmin:
#     image: phpmyadmin/phpmyadmin
#     container_name: hygieneresto_phpmyadmin
#     links:
#       - db:db  # Link phpMyAdmin to your 'db' service
#     environment:
#       PMA_HOST: db         # Tell phpMyAdmin to connect to the 'db' service name
#       PMA_PORT: 3306       # The internal port of the MySQL container
#       MYSQL_ROOT_PASSWORD: ${PASSWORD} # Use the same root password as your 'db' service's MYSQL_ROOT_PASSWORD
#       PMA_ARBITRARY: 1     # Allows entering any host, useful for testing different DBs
#     ports:
#       - "8080:80"          # Expose phpMyAdmin on your host machine's port 8080
#     depends_on:
#       - db # phpMyAdmin depends on the 'db' service
#     networks:
#       - app-network

# # Definition of named volumes for data persistence
# volumes:
#   db_data:

# # Definition of the Docker network
# networks:
#   app-network:
#     driver: bridge